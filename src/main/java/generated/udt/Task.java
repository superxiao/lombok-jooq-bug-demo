/*
 * This file is generated by jOOQ.
 */
package generated.udt;


import javax.annotation.processing.Generated;

import org.jooq.Schema;
import org.jooq.UDTField;
import generated.Public;
import generated.udt.records.TaskRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.15",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Task extends UDTImpl<TaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.task</code>
     */
    public static final Task TASK = new Task();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskRecord> getRecordType() {
        return TaskRecord.class;
    }

    /**
     * The attribute <code>public.task.id</code>.
     */
    public static final UDTField<TaskRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, TASK, "");

    /**
     * The attribute <code>public.task.name</code>.
     */
    public static final UDTField<TaskRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, TASK, "");

    /**
     * The attribute <code>public.task.completed</code>.
     */
    public static final UDTField<TaskRecord, Boolean> COMPLETED = createField(DSL.name("completed"), SQLDataType.BOOLEAN, TASK, "");

    /**
     * No further instances allowed
     */
    private Task() {
        super(DSL.name("task"), null, null, false);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC != null ? Public.PUBLIC : new SchemaImpl(DSL.name("public"));
    }
}
